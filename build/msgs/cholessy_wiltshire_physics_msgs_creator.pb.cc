// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cholessy_wiltshire_physics_msgs_creator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cholessy_wiltshire_physics_msgs_creator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cholessy_wiltshire_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* CholessyWiltshire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CholessyWiltshire_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto() {
  protobuf_AddDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cholessy_wiltshire_physics_msgs_creator.proto");
  GOOGLE_CHECK(file != NULL);
  CholessyWiltshire_descriptor_ = file->message_type(0);
  static const int CholessyWiltshire_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CholessyWiltshire, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CholessyWiltshire, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CholessyWiltshire, time_),
  };
  CholessyWiltshire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CholessyWiltshire_descriptor_,
      CholessyWiltshire::default_instance_,
      CholessyWiltshire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CholessyWiltshire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CholessyWiltshire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CholessyWiltshire));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CholessyWiltshire_descriptor_, &CholessyWiltshire::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto() {
  delete CholessyWiltshire::default_instance_;
  delete CholessyWiltshire_reflection_;
}

void protobuf_AddDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-cholessy_wiltshire_physics_msgs_creato"
    "r.proto\022\034cholessy_wiltshire_msgs.msgs\032\016v"
    "ector3d.proto\"w\n\021CholessyWiltshire\022\'\n\010ve"
    "locity\030\001 \002(\0132\025.gazebo.msgs.Vector3d\022+\n\014a"
    "cceleration\030\002 \002(\0132\025.gazebo.msgs.Vector3d"
    "\022\014\n\004time\030\003 \002(\001", 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cholessy_wiltshire_physics_msgs_creator.proto", &protobuf_RegisterTypes);
  CholessyWiltshire::default_instance_ = new CholessyWiltshire();
  CholessyWiltshire::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto {
  StaticDescriptorInitializer_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto() {
    protobuf_AddDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
  }
} static_descriptor_initializer_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CholessyWiltshire::kVelocityFieldNumber;
const int CholessyWiltshire::kAccelerationFieldNumber;
const int CholessyWiltshire::kTimeFieldNumber;
#endif  // !_MSC_VER

CholessyWiltshire::CholessyWiltshire()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
}

void CholessyWiltshire::InitAsDefaultInstance() {
  velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  acceleration_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
}

CholessyWiltshire::CholessyWiltshire(const CholessyWiltshire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
}

void CholessyWiltshire::SharedCtor() {
  _cached_size_ = 0;
  velocity_ = NULL;
  acceleration_ = NULL;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CholessyWiltshire::~CholessyWiltshire() {
  // @@protoc_insertion_point(destructor:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  SharedDtor();
}

void CholessyWiltshire::SharedDtor() {
  if (this != default_instance_) {
    delete velocity_;
    delete acceleration_;
  }
}

void CholessyWiltshire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CholessyWiltshire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CholessyWiltshire_descriptor_;
}

const CholessyWiltshire& CholessyWiltshire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
  return *default_instance_;
}

CholessyWiltshire* CholessyWiltshire::default_instance_ = NULL;

CholessyWiltshire* CholessyWiltshire::New() const {
  return new CholessyWiltshire;
}

void CholessyWiltshire::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::gazebo::msgs::Vector3d::Clear();
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CholessyWiltshire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d velocity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_acceleration;
        break;
      }

      // required .gazebo.msgs.Vector3d acceleration = 2;
      case 2: {
        if (tag == 18) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_time;
        break;
      }

      // required double time = 3;
      case 3: {
        if (tag == 25) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  return false;
#undef DO_
}

void CholessyWiltshire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  // required .gazebo.msgs.Vector3d velocity = 1;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->velocity(), output);
  }

  // required .gazebo.msgs.Vector3d acceleration = 2;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acceleration(), output);
  }

  // required double time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
}

::google::protobuf::uint8* CholessyWiltshire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  // required .gazebo.msgs.Vector3d velocity = 1;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->velocity(), target);
  }

  // required .gazebo.msgs.Vector3d acceleration = 2;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acceleration(), target);
  }

  // required double time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
  return target;
}

int CholessyWiltshire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gazebo.msgs.Vector3d velocity = 1;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required .gazebo.msgs.Vector3d acceleration = 2;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // required double time = 3;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CholessyWiltshire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CholessyWiltshire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CholessyWiltshire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CholessyWiltshire::MergeFrom(const CholessyWiltshire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_velocity()) {
      mutable_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from.velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::gazebo::msgs::Vector3d::MergeFrom(from.acceleration());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CholessyWiltshire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CholessyWiltshire::CopyFrom(const CholessyWiltshire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CholessyWiltshire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  if (has_acceleration()) {
    if (!this->acceleration().IsInitialized()) return false;
  }
  return true;
}

void CholessyWiltshire::Swap(CholessyWiltshire* other) {
  if (other != this) {
    std::swap(velocity_, other->velocity_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CholessyWiltshire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CholessyWiltshire_descriptor_;
  metadata.reflection = CholessyWiltshire_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace cholessy_wiltshire_msgs

// @@protoc_insertion_point(global_scope)
