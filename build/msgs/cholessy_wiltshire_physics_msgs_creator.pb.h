// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cholessy_wiltshire_physics_msgs_creator.proto

#ifndef PROTOBUF_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto__INCLUDED
#define PROTOBUF_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)

namespace cholessy_wiltshire_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
void protobuf_AssignDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
void protobuf_ShutdownFile_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();

class CholessyWiltshire;

// ===================================================================

class CholessyWiltshire : public ::google::protobuf::Message {
 public:
  CholessyWiltshire();
  virtual ~CholessyWiltshire();

  CholessyWiltshire(const CholessyWiltshire& from);

  inline CholessyWiltshire& operator=(const CholessyWiltshire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CholessyWiltshire& default_instance();

  void Swap(CholessyWiltshire* other);

  // implements Message ----------------------------------------------

  CholessyWiltshire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CholessyWiltshire& from);
  void MergeFrom(const CholessyWiltshire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d velocity = 1;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 1;
  inline const ::gazebo::msgs::Vector3d& velocity() const;
  inline ::gazebo::msgs::Vector3d* mutable_velocity();
  inline ::gazebo::msgs::Vector3d* release_velocity();
  inline void set_allocated_velocity(::gazebo::msgs::Vector3d* velocity);

  // required .gazebo.msgs.Vector3d acceleration = 2;
  inline bool has_acceleration() const;
  inline void clear_acceleration();
  static const int kAccelerationFieldNumber = 2;
  inline const ::gazebo::msgs::Vector3d& acceleration() const;
  inline ::gazebo::msgs::Vector3d* mutable_acceleration();
  inline ::gazebo::msgs::Vector3d* release_acceleration();
  inline void set_allocated_acceleration(::gazebo::msgs::Vector3d* acceleration);

  // required double time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time() const;
  inline void set_time(double value);

  // @@protoc_insertion_point(class_scope:cholessy_wiltshire_msgs.msgs.CholessyWiltshire)
 private:
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_acceleration();
  inline void clear_has_acceleration();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* velocity_;
  ::gazebo::msgs::Vector3d* acceleration_;
  double time_;
  friend void  protobuf_AddDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
  friend void protobuf_AssignDesc_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();
  friend void protobuf_ShutdownFile_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto();

  void InitAsDefaultInstance();
  static CholessyWiltshire* default_instance_;
};
// ===================================================================


// ===================================================================

// CholessyWiltshire

// required .gazebo.msgs.Vector3d velocity = 1;
inline bool CholessyWiltshire::has_velocity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CholessyWiltshire::set_has_velocity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CholessyWiltshire::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CholessyWiltshire::clear_velocity() {
  if (velocity_ != NULL) velocity_->::gazebo::msgs::Vector3d::Clear();
  clear_has_velocity();
}
inline const ::gazebo::msgs::Vector3d& CholessyWiltshire::velocity() const {
  // @@protoc_insertion_point(field_get:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
inline ::gazebo::msgs::Vector3d* CholessyWiltshire::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) velocity_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.velocity)
  return velocity_;
}
inline ::gazebo::msgs::Vector3d* CholessyWiltshire::release_velocity() {
  clear_has_velocity();
  ::gazebo::msgs::Vector3d* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void CholessyWiltshire::set_allocated_velocity(::gazebo::msgs::Vector3d* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.velocity)
}

// required .gazebo.msgs.Vector3d acceleration = 2;
inline bool CholessyWiltshire::has_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CholessyWiltshire::set_has_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CholessyWiltshire::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CholessyWiltshire::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::gazebo::msgs::Vector3d::Clear();
  clear_has_acceleration();
}
inline const ::gazebo::msgs::Vector3d& CholessyWiltshire::acceleration() const {
  // @@protoc_insertion_point(field_get:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.acceleration)
  return acceleration_ != NULL ? *acceleration_ : *default_instance_->acceleration_;
}
inline ::gazebo::msgs::Vector3d* CholessyWiltshire::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) acceleration_ = new ::gazebo::msgs::Vector3d;
  // @@protoc_insertion_point(field_mutable:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.acceleration)
  return acceleration_;
}
inline ::gazebo::msgs::Vector3d* CholessyWiltshire::release_acceleration() {
  clear_has_acceleration();
  ::gazebo::msgs::Vector3d* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void CholessyWiltshire::set_allocated_acceleration(::gazebo::msgs::Vector3d* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.acceleration)
}

// required double time = 3;
inline bool CholessyWiltshire::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CholessyWiltshire::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CholessyWiltshire::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CholessyWiltshire::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double CholessyWiltshire::time() const {
  // @@protoc_insertion_point(field_get:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.time)
  return time_;
}
inline void CholessyWiltshire::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:cholessy_wiltshire_msgs.msgs.CholessyWiltshire.time)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace cholessy_wiltshire_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cholessy_5fwiltshire_5fphysics_5fmsgs_5fcreator_2eproto__INCLUDED
